datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  USER
  ADMIN
}

model User {
  id                    String                  @id @default(cuid())
  name                  String?
  email                 String                  @unique
  password              String?
  emailVerified         DateTime?
  image                 String?
  accounts              Account[]
  role                  Role                    @default(USER)
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  isTwoFactorEnabled    Boolean                 @default(false)
  TwoFactorConfirmation TwoFactorConfirmation[]
  FinancialAccount      FinancialAccount[]
  Premium               Premium[]
  Order                 Order[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expiresAt DateTime

  @@index([email, token])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expiresAt DateTime

  @@index([email, token])
}

model TwoFactorToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expiresAt DateTime

  @@index([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model FinancialAccount {
  id           String         @id @default(cuid())
  userId       String
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  name         String
  plaidId      String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Transactions Transactions[]

  @@index([userId, name, id])
}

model FinancialCategory {
  id           String         @id @default(cuid())
  userId       String
  name         String
  plaidId      String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Transactions Transactions[]

  @@index([userId, name])
}

model Transactions {
  id                 String             @id @default(cuid())
  amount             Int
  payee              String
  notes              String?
  date               DateTime
  financialAccountId String
  financialAccount   FinancialAccount   @relation(fields: [financialAccountId], references: [id], onDelete: Cascade)
  categoryId         String?
  category           FinancialCategory? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
}

model Premium {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  active    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId])
}

model Order {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  total     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId])
}
